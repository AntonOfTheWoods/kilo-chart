apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: kilo
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  name: {{ template "common.names.fullname" . }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
      app.kubernetes.io/component: kilo
  template:
    metadata:
      {{- if .Values.kdaemon.podAnnotations }}
      annotations: {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.podAnnotations "context" $) | nindent 8 }}
      {{- end }}
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        app.kubernetes.io/component: kilo
        {{- if .Values.kdaemon.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.podLabels "context" $) | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "kilo.serviceAccountName" . }}
      hostNetwork: true
      {{- include "kilo.imagePullSecrets" . | nindent 6 }}
      {{- if .Values.kdaemon.affinity }}
      affinity: {{- include "common.tplvalues.render" ( dict "value" .Values.kdaemon.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.kdaemon.podAffinityPreset "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.kdaemon.podAntiAffinityPreset "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.kdaemon.nodeAffinityPreset.type "key" .Values.kdaemon.nodeAffinityPreset.key "values" .Values.kdaemon.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.kdaemon.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" ( dict "value" .Values.kdaemon.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.kdaemon.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.kdaemon.priorityClassName }}
      priorityClassName: {{ .Values.kdaemon.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.kdaemon.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.kdaemon.podSecurityContext "enabled" | toYaml | nindent 12 }}
      {{- end }}

      initContainers:
        - name: install-cni
          image: {{ template "kilo.image" . }}
          # image: squat/kilo
          imagePullPolicy: {{ .Values.kdaemon.image.pullPolicy }}
          command:
            - /bin/sh
            - -c
            - set -e -x;
              cp /opt/cni/bin/* /host/opt/cni/bin/;
              TMP_CONF="$CNI_CONF_NAME".tmp;
              echo "$CNI_NETWORK_CONFIG" > $TMP_CONF;
              rm -f /host/etc/cni/net.d/*;
              mv $TMP_CONF /host/etc/cni/net.d/$CNI_CONF_NAME
          env:
            - name: CNI_CONF_NAME
              value: 10-kilo.conflist
            - name: CNI_NETWORK_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: {{ template "common.names.fullname" . }}
                  key: cni-conf.json
          volumeMounts:
            - name: cni-bin-dir
              mountPath: /host/opt/cni/bin
            - name: cni-conf-dir
              mountPath: /host/etc/cni/net.d

      {{- if .Values.kdaemon.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.initContainers "context" $) | nindent 8 }}
      {{- end }}

      tolerations:
        - effect: NoSchedule
          operator: Exists
        - effect: NoExecute
          operator: Exists
      containers:
        - name: kilo  # was kilo
          image: {{ template "kilo.image" . }}  # was squat/kilo

          {{- if .Values.kdaemon.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.command "context" $) | nindent 12 }}
          {{- end }}
          args:
            - --kubeconfig=/etc/kubernetes/kubeconfig
            - --hostname=$(NODE_NAME)
          {{- if .Values.kdaemon.args }}
            {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.args "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.kdaemon.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}

          ## FIXME: Is this obligatory?
          securityContext:
            privileged: true
          {{- /*
          # {{- if .Values.kdaemon.containerSecurityContext.enabled }}
          # securityContext: {{- omit .Values.kdaemon.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          # {{- end }}
          */}}

          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{- if .Values.kdaemon.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.kdaemon.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kdaemon.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.kdaemon.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.kdaemon.extraEnvVarsSecret "context" $) }}
            {{- end }}


          ## FIXME: Is this useful here???
          # ports:
          #   - containerPort: foo
          #     protocol: bar
          #
          volumeMounts:
            - name: cni-conf-dir
              mountPath: /etc/cni/net.d
            - name: kilo-dir
              mountPath: /var/lib/kilo
            - name: kubeconfig
              mountPath: /etc/kubernetes/kubeconfig
              readOnly: true
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: xtables-lock
              mountPath: /run/xtables.lock
              readOnly: false

            {{- if .Values.kdaemon.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}

          {{- if .Values.kdaemon.resources }}
          resources: {{- toYaml .Values.kdaemon.resources | nindent 12 }}
          {{- end }}

        {{- if .Values.kdaemon.sidecars }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.kdaemon.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-conf-dir
          hostPath:
            path: /etc/cni/net.d
        - name: kilo-dir
          hostPath:
            path: /var/lib/kilo
        - name: kubeconfig
          hostPath:
            # Since kilo runs as a daemonset, it is recommended that you copy the
            # k3s.yaml kubeconfig file from the master node to all worker nodes
            # with the same path structure.
            # Copying only appears necessary when the node is NOT a cluster master
            path: /etc/rancher/k3s/k3s.yaml
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        {{- if .Values.kdaemon.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.kdaemon.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
